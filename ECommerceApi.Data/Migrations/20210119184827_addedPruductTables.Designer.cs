// <auto-generated />
using System;
using ECommerceApi.Infastructure.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ECommerceApi.Infastructure.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20210119184827_addedPruductTables")]
    partial class addedPruductTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("ECommerceApi.Core.DbModels.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductBrandId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductBrandId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ECommerceApi.Core.DbModels.ProductBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductBrands");
                });

            modelBuilder.Entity("ECommerceApi.Core.DbModels.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("ECommerceApi.Core.DbModels.Sku", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SkuId")
                        .HasColumnType("int");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SkuId");

                    b.HasIndex("VariantId");

                    b.ToTable("Sku");
                });

            modelBuilder.Entity("ECommerceApi.Core.DbModels.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ErpCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Variant");
                });

            modelBuilder.Entity("ECommerceApi.Core.DbModels.VariantOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("VariantId");

                    b.ToTable("VariantOption");
                });

            modelBuilder.Entity("ECommerceApi.Core.DbModels.Product", b =>
                {
                    b.HasOne("ECommerceApi.Core.DbModels.ProductBrand", "ProductBrand")
                        .WithMany("Products")
                        .HasForeignKey("ProductBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceApi.Core.DbModels.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductBrand");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("ECommerceApi.Core.DbModels.Sku", b =>
                {
                    b.HasOne("ECommerceApi.Core.DbModels.Product", "Product")
                        .WithMany("Skus")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceApi.Core.DbModels.Sku", null)
                        .WithMany("Skus")
                        .HasForeignKey("SkuId");

                    b.HasOne("ECommerceApi.Core.DbModels.Variant", "Variant")
                        .WithMany("Skus")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("ECommerceApi.Core.DbModels.Variant", b =>
                {
                    b.HasOne("ECommerceApi.Core.DbModels.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceApi.Core.DbModels.VariantOption", b =>
                {
                    b.HasOne("ECommerceApi.Core.DbModels.Product", null)
                        .WithMany("VariantOptions")
                        .HasForeignKey("ProductId");

                    b.HasOne("ECommerceApi.Core.DbModels.Variant", "Variant")
                        .WithMany("VariantOptions")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("ECommerceApi.Core.DbModels.Product", b =>
                {
                    b.Navigation("Skus");

                    b.Navigation("VariantOptions");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("ECommerceApi.Core.DbModels.ProductBrand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommerceApi.Core.DbModels.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommerceApi.Core.DbModels.Sku", b =>
                {
                    b.Navigation("Skus");
                });

            modelBuilder.Entity("ECommerceApi.Core.DbModels.Variant", b =>
                {
                    b.Navigation("Skus");

                    b.Navigation("VariantOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
